apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Release.Name}}
  labels:
    app: {{.Release.Name}}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{.Release.Name}}
  template:
    metadata:
      labels:
        app: {{.Release.Name}}
      annotations:
        checksum/configuration: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      containers:
        - name: {{.Release.Name}}
          image: {{ .Values.deployment.image.location }}:{{ .Values.deployment.image.tag }}
          imagePullPolicy: IfNotPresent
          {{ if .Values.deployment.sleepStart }}
          # Just spin & wait forever
          command: [ "/bin/bash", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          {{ end -}}
          envFrom:
            - configMapRef:
                name: {{.Release.Name}}-configuration
          volumeMounts:
            - mountPath: /data
              name: data
            {{- if .Values.deployment.withDockerSocket}}
            - name: dockersock
              mountPath: "/var/run/docker.sock"
            {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{.Release.Name}}-data
        {{ if .Values.deployment.withDockerSocket}}
        - name: dockersock
          hostPath:
            path: {{.Values.deployment.dockersocket}}
        {{ end -}}